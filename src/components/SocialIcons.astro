---
import Link from '@/components/Link.astro'
import { buttonVariants } from '@/components/ui/button'
import type { Link as SocialLink } from '@/consts'
import { cn } from '@/lib/utils'
import { Icon } from 'astro-icon/components'

const { default: devtoIcon } = await import(`@/components/icons/devto.svg?raw`)
const { default: hashnodeIcon } = await import(
  `@/components/icons/hashnode.svg?raw`
)
const { default: mediumIcon } = await import(
  `@/components/icons/medium.svg?raw`
)

interface Props {
  links: SocialLink[]
  className?: string
}

const { links, className } = Astro.props

const iconMap = {
  Website: 'lucide:globe',
  GitHub: 'lucide:github',
  LinkedIn: 'lucide:linkedin',
  Twitter: 'lucide:twitter',
  Email: 'lucide:mail',
  Telegram: 'lucide:send',
  RSS: 'lucide:rss',
}

const getSocialLink = ({ href, label }: SocialLink) => ({
  href: label === 'Email' ? `mailto:${href}` : href,
  ariaLabel: label,
  iconName:
    iconMap[label as keyof typeof iconMap] || 'lucide:message-circle-question',
})
---

<ul class={cn('not-prose flex flex-wrap gap-2', className)} role="list">
  {
    links.map((link) => {
      const { href, ariaLabel, iconName } = getSocialLink(link)
      console.log('link:', link)
      return (
        <li>
          <Link
            href={href}
            aria-label={ariaLabel}
            title={ariaLabel}
            class={buttonVariants({ variant: 'outline', size: 'icon' })}
            external
          >
            {ariaLabel === 'dev.to' && <Fragment set:html={devtoIcon} />}
            {ariaLabel === 'Medium' && <Fragment set:html={mediumIcon} />}
            {ariaLabel === 'Hashnode' && <Fragment set:html={hashnodeIcon} />}
            {ariaLabel !== 'dev.to' &&
              ariaLabel !== 'Medium' &&
              ariaLabel !== 'Hashnode' && (
                <Icon name={iconName} class="size-4" />
              )}
          </Link>
        </li>
      )
    })
  }
</ul>
