---
import BlogCard from '@/components/BlogCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Container from '@/components/Container.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import { parseAuthors } from '@/lib/utils'
import type { PaginateFunction } from 'astro'
import { type CollectionEntry, getCollection } from 'astro:content'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allPosts = await getCollection('blog', ({ data }) => !data.draft)
  return paginate(
    allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf()),
    { pageSize: SITE.POSTS_PER_PAGE },
  )
}

const { page } = Astro.props

const postsByYear = page.data.reduce(
  (acc: Record<string, CollectionEntry<'blog'>[]>, post) => {
    const year = post.data.date.getFullYear().toString()
    ;(acc[year] ??= []).push(post)
    return acc
  },
  {},
)

const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a))
---

<Layout
  title="Blog"
  description="Blog"
  structuredData={{
    '@context': 'https://schema.org',
    '@type': 'CollectionPage',
    url: Astro.url,
    name: 'Blog',
    description: 'Blog',
    isPartOf: {
      '@type': 'WebSite',
      url: Astro.url,
    },
    breadcrumb: {
      '@type': 'BreadcrumbList',
      itemListElement: [
        {
          '@type': 'ListItem',
          position: 1,
          name: 'Home',
          item: Astro.site,
        },
        {
          '@type': 'ListItem',
          position: 2,
          name: 'Blog',
          item: new URL('blog', Astro.site),
        },
        {
          '@type': 'ListItem',
          position: 3,
          name: `Page ${page.currentPage}`,
          item: new URL(Astro.url, Astro.site),
        },
      ],
    },
    hasPart: await Promise.all(
      page.data.map(async (post) => {
        let authors: Awaited<ReturnType<typeof parseAuthors>> = []
        if (Array.isArray(post.data.authors) && post.data.authors.length > 0) {
          authors = await parseAuthors(post.data.authors)
        }
        return {
          '@type': 'BlogPosting',
          headline: post.data.title,
          url: new URL(post.slug, Astro.url),
          datePublished: post.data.date,
          author: authors.map((author) => ({
            '@type': 'Person',
            name: author.name,
            url: new URL(`authors/${author.slug}`, Astro.site),
          })),
          description: post.data.description,
        }
      }),
    ),
  }}
>
  <Container class="flex grow flex-col gap-y-6">
    <Breadcrumbs
      items={[
        { label: 'Blog', href: '/blog', icon: 'lucide:archive' },
        { label: `Page ${page.currentPage}`, icon: 'lucide:folder-open' },
      ]}
    />

    <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
      {
        years.map((year) => (
          <section class="flex flex-col gap-y-4">
            <div class="font-semibold">{year}</div>
            <ul class="not-prose flex flex-col gap-4">
              {postsByYear[year].map((post) => (
                <li>
                  <BlogCard entry={post} />
                </li>
              ))}
            </ul>
          </section>
        ))
      }
    </div>

    <PaginationComponent
      currentPage={page.currentPage}
      totalPages={page.lastPage}
      baseUrl="/blog/"
      client:load
    />
  </Container>
</Layout>
